apiVersion: v1
kind: ConfigMap
metadata:
  name: aiverify-db-scripts
  namespace: aiverify
data:
  init-script.sh: |
    #!/bin/bash
    
    if [ -f /data/db/.mongodb_initialized ]; then
      echo "Database already initialized. Skipping initialization."
      exit 0
    else
      echo "Executing initialization script..."
    
    # Read username and password from environment variables
    MONGO_USERNAME=$MONGO_INITDB_ROOT_USERNAME
    MONGO_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
    
    if [ -z "$MONGO_USERNAME" ] || [ -z "$MONGO_PASSWORD" ]; then
      echo "Error: Username or password environment variables not set."
      exit 1
    fi

    # Create database at first startup
    mongosh --host localhost --eval "db.getSiblingDB('aiverify').createUser({user: '$MONGO_USERNAME', pwd: '$MONGO_PASSWORD', roles: ['readWrite']})"
      touch /data/db/.mongodb_initialized
    fi
---
apiVersion: v1
kind: Secret
metadata:
  name: aiverify-db-secret
  namespace: aiverify
type: Opaque
data:
  username: YWl2ZXJpZnk=  # base64 encoded 'aiverify'
  password: YWl2ZXJpZnk=  # base64 encoded 'aiverify'
---
apiVersion: v1
kind: Service
metadata:
  name: aiverify-db-service
  namespace: aiverify
spec:
  ports:
    - name: tcp
      port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    app.kubernetes.io/name: aiverify-db
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: aiverify-db-statefulset
  namespace: aiverify
  labels:
    app.kubernetes.io/name: aiverify-db
spec:
  replicas: 1
  serviceName: aiverify-db-service
  selector:
    matchLabels:
      app.kubernetes.io/name: aiverify-db
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aiverify-db
    spec:
      serviceAccountName: default
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: aiverify-db
          image: public.ecr.aws/docker/library/mongo:6.0.4
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aiverify-db-secret
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aiverify-db-secret
                  key: password
            - name: MONGO_INITDB_DATABASE
              value: "admin"
          volumeMounts:
            - name: aiverify-db-data
              mountPath: /data/db
            - name: aiverify-db-logs
              mountPath: /var/log/mongodb
            - name: aiverify-db-scripts
              mountPath: /docker-entrypoint-initdb.d
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                ["ALL"]
      volumes:
        - name: aiverify-db-scripts
          configMap:
            name: aiverify-db-scripts
  volumeClaimTemplates:
    - metadata:
        name: aiverify-db-data
        namespace: aiverify
      spec:
        storageClassName: manual
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: aiverify-db-logs
        namespace: aiverify
      spec:
        storageClassName: manual
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---